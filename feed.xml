<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN, en-US"><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://hjijin.gz.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hjijin.gz.com/blog/" rel="alternate" type="text/html" hreflang="zh-CN, en-US" /><updated>2024-05-13T13:33:24+08:00</updated><id>https://hjijin.gz.com/blog/feed.xml</id><title type="html">Jim.h’ Blog</title><subtitle>Across the great wall, we can reach every corner in the world, hello world!
</subtitle><author><name>Jim Huang</name><email>hjijin.gz@gmail.com</email></author><entry><title type="html">docker-compose 创建 nginx 容器尝试挂载 nginx.conf 文件时报错</title><link href="https://hjijin.gz.com/blog/development/docker-compose-%E5%88%9B%E5%BB%BA-nginx-%E5%AE%B9%E5%99%A8%E5%B0%9D%E8%AF%95%E6%8C%82%E8%BD%BD-nginx.conf-%E6%96%87%E4%BB%B6%E6%97%B6%E6%8A%A5%E9%94%99.html" rel="alternate" type="text/html" title="docker-compose 创建 nginx 容器尝试挂载 nginx.conf 文件时报错" /><published>2023-04-13T00:00:00+08:00</published><updated>2023-04-13T00:00:00+08:00</updated><id>https://hjijin.gz.com/blog/development/docker-compose%20%E5%88%9B%E5%BB%BA%20nginx%20%E5%AE%B9%E5%99%A8%E5%B0%9D%E8%AF%95%E6%8C%82%E8%BD%BD%20nginx.conf%20%E6%96%87%E4%BB%B6%E6%97%B6%E6%8A%A5%E9%94%99</id><content type="html" xml:base="https://hjijin.gz.com/blog/development/docker-compose-%E5%88%9B%E5%BB%BA-nginx-%E5%AE%B9%E5%99%A8%E5%B0%9D%E8%AF%95%E6%8C%82%E8%BD%BD-nginx.conf-%E6%96%87%E4%BB%B6%E6%97%B6%E6%8A%A5%E9%94%99.html">&lt;p&gt;有些说是不支持直接挂载文件，只能挂载文件夹，尝试先不挂载 nginx.conf，但是依然报错：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy@VM-4-17-ubuntu:~/docker-services&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Running 0/1
 ⠿ Container nginx  Starting                                                                                                                               0.4s
Error response from daemon: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting &lt;span class=&quot;s2&quot;&gt;&quot;/home/deploy/nginx/conf/nginx.conf&quot;&lt;/span&gt; to rootfs at &lt;span class=&quot;s2&quot;&gt;&quot;/etc/nginx/nginx.conf&quot;&lt;/span&gt;: mount /home/deploy/nginx/conf/nginx.conf:/etc/nginx/nginx.conf &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;via /proc/self/fd/7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;or vice-versa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? Check &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;the specified host path exists and is the expected &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查了半天，原因是我主机的 $PWD/conf/nginx.conf 建成了一个文件夹，而不是文件&lt;/p&gt;

&lt;p&gt;删除 nginx.conf 目录，然后新建一个 nginx.conf 文件就可以了…&lt;/p&gt;</content><author><name>Jim Huang</name><email>hjijin.gz@gmail.com</email></author><category term="development" /><category term="solved_problems" /><category term="Docker" /><summary type="html">有些说是不支持直接挂载文件，只能挂载文件夹，尝试先不挂载 nginx.conf，但是依然报错： deploy@VM-4-17-ubuntu:~/docker-services$ docker-compose up -d [+] Running 0/1 ⠿ Container nginx Starting 0.4s Error response from daemon: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting &quot;/home/deploy/nginx/conf/nginx.conf&quot; to rootfs at &quot;/etc/nginx/nginx.conf&quot;: mount /home/deploy/nginx/conf/nginx.conf:/etc/nginx/nginx.conf (via /proc/self/fd/7), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type 查了半天，原因是我主机的 $PWD/conf/nginx.conf 建成了一个文件夹，而不是文件 删除 nginx.conf 目录，然后新建一个 nginx.conf 文件就可以了…</summary></entry><entry><title type="html">如何在 Ubuntu 上升级 Docker？</title><link href="https://hjijin.gz.com/blog/development/How-do-I-Upgrade-Docker-on-Ubuntu.html" rel="alternate" type="text/html" title="如何在 Ubuntu 上升级 Docker？" /><published>2023-04-13T00:00:00+08:00</published><updated>2023-04-13T00:00:00+08:00</updated><id>https://hjijin.gz.com/blog/development/How-do-I-Upgrade-Docker-on-Ubuntu</id><content type="html" xml:base="https://hjijin.gz.com/blog/development/How-do-I-Upgrade-Docker-on-Ubuntu.html">&lt;p&gt;本文介绍了如何在 Ubuntu 中升级 docker。&lt;/p&gt;

&lt;p&gt;Docker 是一个开源平台，可帮助在容器中创建、部署和运行各种应用程序。容器是一个独立的、轻量级的可执行包，包含应用程序运行所需的所有内容，包括库、代码和系统工具。
拥有更新版本的 Docker 是顺利使用 Docker 服务的关键，并且新版本提供了最新的特性和功能，同时还降低了出现安全漏洞和其他问题的可能性。&lt;/p&gt;

&lt;p&gt;考虑到它的重要性，本指南将指导如何在 Ubuntu 20.04 上升级 Docker，以确保系统的安全性、稳定性和性能。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#step-1-检查当前版本&quot; id=&quot;markdown-toc-step-1-检查当前版本&quot;&gt;&lt;strong&gt;Step 1: 检查当前版本&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-2卸载当前版本&quot; id=&quot;markdown-toc-step-2卸载当前版本&quot;&gt;&lt;strong&gt;Step 2:卸载当前版本&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-3-验证卸载&quot; id=&quot;markdown-toc-step-3-验证卸载&quot;&gt;&lt;strong&gt;Step 3: 验证卸载&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-4-安装依赖&quot; id=&quot;markdown-toc-step-4-安装依赖&quot;&gt;&lt;strong&gt;Step 4: 安装依赖&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-5-添加-docker-gpg-key&quot; id=&quot;markdown-toc-step-5-添加-docker-gpg-key&quot;&gt;&lt;strong&gt;Step 5: 添加 Docker GPG Key&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-6添加安装源&quot; id=&quot;markdown-toc-step-6添加安装源&quot;&gt;&lt;strong&gt;Step 6:添加安装源&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-7-更新安装包索引&quot; id=&quot;markdown-toc-step-7-更新安装包索引&quot;&gt;&lt;strong&gt;Step 7: 更新安装包索引&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-8-安装-docker-ce-包升级&quot; id=&quot;markdown-toc-step-8-安装-docker-ce-包升级&quot;&gt;&lt;strong&gt;Step 8: 安装 Docker CE 包（升级）&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#总结&quot; id=&quot;markdown-toc-总结&quot;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-1-检查当前版本&quot;&gt;&lt;strong&gt;Step 1: 检查当前版本&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;在升级 Docker 之前，最好检查系统上安装的当前版本。可以通过在终端中运行带有&lt;strong&gt;version&lt;/strong&gt; 选项的 &lt;strong&gt;docker&lt;/strong&gt; 命令来查看：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy@VM-4-17-ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
Docker version 20.10.12, build 20.10.12-0ubuntu2~20.04.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显示当前安装在现有系统上的 Docker 的版本号 &lt;strong&gt;20.10.12&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;step-2卸载当前版本&quot;&gt;&lt;strong&gt;Step 2:卸载当前版本&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;要升级 Docker，首先要卸载操作系统上安装的当前版本：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy@VM-4-17-ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;docker
ii  docker.io 20.10.12-0ubuntu2~20.04.1 amd64 Linux container runtime
deploy@VM-4-17-ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt remove &lt;span class=&quot;nt&quot;&gt;--purge&lt;/span&gt; docker.io
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following packages were automatically installed and are no longer required:
  bridge-utils containerd dnsmasq-base pigz runc ubuntu-fan
Use &lt;span class=&quot;s1&quot;&gt;&apos;sudo apt autoremove&apos;&lt;/span&gt; to remove them.
The following packages will be REMOVED:
  docker.io&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
0 upgraded, 0 newly installed, 1 to remove and 163 not upgraded.
After this operation, 163 MB disk space will be freed.
Do you want to &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Y/n] Y
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Reading database ... 96627 files and directories currently installed.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Removing docker.io &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;20.10.12-0ubuntu2~20.04.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
&lt;span class=&quot;s1&quot;&gt;&apos;/usr/share/docker.io/contrib/nuke-graph-directory.sh&apos;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;s1&quot;&gt;&apos;/var/lib/docker/nuke-graph-directory.sh&apos;&lt;/span&gt;
Processing triggers &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;man-db &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.9.1-1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Reading database ... 96421 files and directories currently installed.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Purging configuration files &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;docker.io &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;20.10.12-0ubuntu2~20.04.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...

Nuking /var/lib/docker ...
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;this is wrong, press Ctrl+C NOW!&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

+ &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;10

+ &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/lib/docker/buildkit /var/lib/docker/containers /var/lib/docker/image /var/lib/docker/network /var/lib/docker/nuke-graph-directory.sh /var/lib/docker/overlay2 /var/lib/docker/plugins /var/lib/docker/runtimes /var/lib/docker/swarm /var/lib/docker/tmp /var/lib/docker/trust /var/lib/docker/volumes
dpkg: warning: &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;removing docker.io, directory &lt;span class=&quot;s1&quot;&gt;&apos;/etc/docker&apos;&lt;/span&gt; not empty so not removed
deploy@VM-4-17-ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /etc/docker
deploy@VM-4-17-ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3-验证卸载&quot;&gt;&lt;strong&gt;Step 3: 验证卸载&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;删除 Docker 后，通过运行以下命令验证删除：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy@VM-4-17-ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-bash&lt;/span&gt;: /usr/bin/docker: No such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-4-安装依赖&quot;&gt;&lt;strong&gt;Step 4: 安装依赖&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;删除旧版本的 Docker 后，通过运行以下命令安装依赖包：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy@VM-4-17-ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;apt-transport-https ca-certificates curl gnupg-agent software-properties-common
Reading package lists... Done
Building dependency tree
Reading state information... Done
^[[Aapt-transport-https is already the newest version &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.0.9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
ca-certificates is already the newest version &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;20211016ubuntu0.20.04.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
curl is already the newest version &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7.68.0-1ubuntu2.18&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
gnupg-agent is already the newest version &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.2.19-3ubuntu2.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
software-properties-common is already the newest version &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.99.9.11&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-5-添加-docker-gpg-key&quot;&gt;&lt;strong&gt;Step 5: 添加 Docker GPG Key&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy@VM-4-17-ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://download.docker.com/linux/ubuntu/gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -

OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-6添加安装源&quot;&gt;&lt;strong&gt;Step 6:添加安装源&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;由于国内网络原因，建议使用国内源：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy@VM-4-17-ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository &lt;span class=&quot;s2&quot;&gt;&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;lsb_release &lt;span class=&quot;nt&quot;&gt;-cs&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; stable&quot;&lt;/span&gt;
Get:1 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal InRelease &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;57.7 kB]
Get:2 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 Packages &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;26.8 kB]
Hit:3 http://ppa.launchpad.net/chris-lea/redis-server/ubuntu focal InRelease
Get:4 https://dl.yarnpkg.com/debian stable InRelease &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;17.1 kB]
Hit:5 https://deb.nodesource.com/node_12.x focal InRelease
Hit:6 http://ppa.launchpad.net/git-core/ppa/ubuntu focal InRelease
Fetched 102 kB &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;2s &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;54.3 kB/s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Reading package lists... Done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-7-更新安装包索引&quot;&gt;&lt;strong&gt;Step 7: 更新安装包索引&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;上一步添加了安装源，要想安装可用软件包还需要先更新本地软件包索引：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy@VM-4-17-ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
Hit:1 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal InRelease
Hit:2 http://ppa.launchpad.net/chris-lea/redis-server/ubuntu focal InRelease
Get:3 https://dl.yarnpkg.com/debian stable InRelease &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;17.1 kB]
Hit:4 https://deb.nodesource.com/node_12.x focal InRelease
Hit:5 http://ppa.launchpad.net/git-core/ppa/ubuntu focal InRelease
Fetched 17.1 kB &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1s &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;18.2 kB/s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Reading package lists... Done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-8-安装-docker-ce-包升级&quot;&gt;&lt;strong&gt;Step 8: 安装 Docker CE 包（升级）&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;从官方 Docker 存储库安装 Docker CE（社区版）包：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy@VM-4-17-ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-ce
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
  containerd.io docker-buildx-plugin docker-ce-cli docker-ce-rootless-extras docker-compose-plugin
Suggested packages:
  aufs-tools cgroupfs-mount | cgroup-lite
Recommended packages:
  pigz slirp4netns
The following NEW packages will be installed:
  containerd.io docker-buildx-plugin docker-ce docker-ce-cli docker-ce-rootless-extras docker-compose-plugin
0 upgraded, 6 newly installed, 0 to remove and 0 not upgraded.
Need to get 109 MB of archives.
After this operation, 395 MB of additional disk space will be used.
Do you want to &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Y/n] Y
Get:1 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 containerd.io amd64 1.6.20-1 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;28.3 MB]
Get:2 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 docker-buildx-plugin amd64 0.10.4-1~ubuntu.20.04~focal &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;25.9 MB]
Get:3 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 docker-ce-cli amd64 5:23.0.3-1~ubuntu.20.04~focal &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;13.2 MB]
Get:4 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 docker-ce amd64 5:23.0.3-1~ubuntu.20.04~focal &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;22.0 MB]
Get:5 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 docker-ce-rootless-extras amd64 5:23.0.3-1~ubuntu.20.04~focal &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8,778 kB]
Get:6 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 docker-compose-plugin amd64 2.17.2-1~ubuntu.20.04~focal &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;10.9 MB]
Fetched 109 MB &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;8s &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;14.1 MB/s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Selecting previously unselected package containerd.io.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Reading database ... 96347 files and directories currently installed.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Preparing to unpack .../0-containerd.io_1.6.20-1_amd64.deb ...
Unpacking containerd.io &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.6.20-1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Selecting previously unselected package docker-buildx-plugin.
Preparing to unpack .../1-docker-buildx-plugin_0.10.4-1~ubuntu.20.04~focal_amd64.deb ...
Unpacking docker-buildx-plugin &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.10.4-1~ubuntu.20.04~focal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Selecting previously unselected package docker-ce-cli.
Preparing to unpack .../2-docker-ce-cli_5%3a23.0.3-1~ubuntu.20.04~focal_amd64.deb ...
Unpacking docker-ce-cli &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5:23.0.3-1~ubuntu.20.04~focal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Selecting previously unselected package docker-ce.
Preparing to unpack .../3-docker-ce_5%3a23.0.3-1~ubuntu.20.04~focal_amd64.deb ...
Unpacking docker-ce &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5:23.0.3-1~ubuntu.20.04~focal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Selecting previously unselected package docker-ce-rootless-extras.
Preparing to unpack .../4-docker-ce-rootless-extras_5%3a23.0.3-1~ubuntu.20.04~focal_amd64.deb ...
Unpacking docker-ce-rootless-extras &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5:23.0.3-1~ubuntu.20.04~focal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Selecting previously unselected package docker-compose-plugin.
Preparing to unpack .../5-docker-compose-plugin_2.17.2-1~ubuntu.20.04~focal_amd64.deb ...
Unpacking docker-compose-plugin &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.17.2-1~ubuntu.20.04~focal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Setting up docker-buildx-plugin &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.10.4-1~ubuntu.20.04~focal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Setting up containerd.io &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.6.20-1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Setting up docker-compose-plugin &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.17.2-1~ubuntu.20.04~focal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Setting up docker-ce-cli &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5:23.0.3-1~ubuntu.20.04~focal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Setting up docker-ce-rootless-extras &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5:23.0.3-1~ubuntu.20.04~focal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Setting up docker-ce &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5:23.0.3-1~ubuntu.20.04~focal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /lib/systemd/system/docker.service.
Created symlink /etc/systemd/system/sockets.target.wants/docker.socket → /lib/systemd/system/docker.socket.
Processing triggers &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;man-db &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.9.1-1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
Processing triggers &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;systemd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;245.4-4ubuntu3.17&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;顺便把 docker-compose 也安装了：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/docker/compose/releases/download/2.17.2/docker-compose-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /usr/local/bin/docker-compose
&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;/span&gt; +x /usr/local/bin/docker-compose
docker-compose &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;在 Ubuntu 中将 Docker 升级到最新版本，首先要卸载 docker 的旧版本及其所有依赖项。之后从Docker官方仓库下载最新的 Docker CE 包并安装到系统中。
虽然说是更新，其实全新安装也不过如此。&lt;/p&gt;</content><author><name>Jim Huang</name><email>hjijin.gz@gmail.com</email></author><category term="development" /><category term="server" /><category term="Docker" /><summary type="html">本文介绍了如何在 Ubuntu 中升级 docker。 Docker 是一个开源平台，可帮助在容器中创建、部署和运行各种应用程序。容器是一个独立的、轻量级的可执行包，包含应用程序运行所需的所有内容，包括库、代码和系统工具。 拥有更新版本的 Docker 是顺利使用 Docker 服务的关键，并且新版本提供了最新的特性和功能，同时还降低了出现安全漏洞和其他问题的可能性。 考虑到它的重要性，本指南将指导如何在 Ubuntu 20.04 上升级 Docker，以确保系统的安全性、稳定性和性能。 Step 1: 检查当前版本 Step 2:卸载当前版本 Step 3: 验证卸载 Step 4: 安装依赖 Step 5: 添加 Docker GPG Key Step 6:添加安装源 Step 7: 更新安装包索引 Step 8: 安装 Docker CE 包（升级） 总结 Step 1: 检查当前版本 在升级 Docker 之前，最好检查系统上安装的当前版本。可以通过在终端中运行带有version 选项的 docker 命令来查看： deploy@VM-4-17-ubuntu:~$ docker -v Docker version 20.10.12, build 20.10.12-0ubuntu2~20.04.1 显示当前安装在现有系统上的 Docker 的版本号 20.10.12。 Step 2:卸载当前版本 要升级 Docker，首先要卸载操作系统上安装的当前版本： deploy@VM-4-17-ubuntu:~$ dpkg -l | grep docker ii docker.io 20.10.12-0ubuntu2~20.04.1 amd64 Linux container runtime deploy@VM-4-17-ubuntu:~$ sudo apt remove --purge docker.io Reading package lists... Done Building dependency tree Reading state information... Done The following packages were automatically installed and are no longer required: bridge-utils containerd dnsmasq-base pigz runc ubuntu-fan Use &apos;sudo apt autoremove&apos; to remove them. The following packages will be REMOVED: docker.io* 0 upgraded, 0 newly installed, 1 to remove and 163 not upgraded. After this operation, 163 MB disk space will be freed. Do you want to continue? [Y/n] Y (Reading database ... 96627 files and directories currently installed.) Removing docker.io (20.10.12-0ubuntu2~20.04.1) ... &apos;/usr/share/docker.io/contrib/nuke-graph-directory.sh&apos; -&amp;gt; &apos;/var/lib/docker/nuke-graph-directory.sh&apos; Processing triggers for man-db (2.9.1-1) ... (Reading database ... 96421 files and directories currently installed.) Purging configuration files for docker.io (20.10.12-0ubuntu2~20.04.1) ... Nuking /var/lib/docker ... (if this is wrong, press Ctrl+C NOW!) + sleep 10 + rm -rf /var/lib/docker/buildkit /var/lib/docker/containers /var/lib/docker/image /var/lib/docker/network /var/lib/docker/nuke-graph-directory.sh /var/lib/docker/overlay2 /var/lib/docker/plugins /var/lib/docker/runtimes /var/lib/docker/swarm /var/lib/docker/tmp /var/lib/docker/trust /var/lib/docker/volumes dpkg: warning: while removing docker.io, directory &apos;/etc/docker&apos; not empty so not removed deploy@VM-4-17-ubuntu:~$ sudo rm -rf /etc/docker deploy@VM-4-17-ubuntu:~$ dpkg -l | grep docker Step 3: 验证卸载 删除 Docker 后，通过运行以下命令验证删除： deploy@VM-4-17-ubuntu:~$ docker -v -bash: /usr/bin/docker: No such file or directory Step 4: 安装依赖 删除旧版本的 Docker 后，通过运行以下命令安装依赖包： deploy@VM-4-17-ubuntu:~$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common Reading package lists... Done Building dependency tree Reading state information... Done ^[[Aapt-transport-https is already the newest version (2.0.9). ca-certificates is already the newest version (20211016ubuntu0.20.04.1). curl is already the newest version (7.68.0-1ubuntu2.18). gnupg-agent is already the newest version (2.2.19-3ubuntu2.2). software-properties-common is already the newest version (0.99.9.11). 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded. Step 5: 添加 Docker GPG Key 为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥： deploy@VM-4-17-ubuntu:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - OK Step 6:添加安装源 由于国内网络原因，建议使用国内源： deploy@VM-4-17-ubuntu:~$ sudo add-apt-repository &quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot; Get:1 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal InRelease [57.7 kB] Get:2 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 Packages [26.8 kB] Hit:3 http://ppa.launchpad.net/chris-lea/redis-server/ubuntu focal InRelease Get:4 https://dl.yarnpkg.com/debian stable InRelease [17.1 kB] Hit:5 https://deb.nodesource.com/node_12.x focal InRelease Hit:6 http://ppa.launchpad.net/git-core/ppa/ubuntu focal InRelease Fetched 102 kB in 2s (54.3 kB/s) Reading package lists... Done Step 7: 更新安装包索引 上一步添加了安装源，要想安装可用软件包还需要先更新本地软件包索引： deploy@VM-4-17-ubuntu:~$ sudo apt-get update Hit:1 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal InRelease Hit:2 http://ppa.launchpad.net/chris-lea/redis-server/ubuntu focal InRelease Get:3 https://dl.yarnpkg.com/debian stable InRelease [17.1 kB] Hit:4 https://deb.nodesource.com/node_12.x focal InRelease Hit:5 http://ppa.launchpad.net/git-core/ppa/ubuntu focal InRelease Fetched 17.1 kB in 1s (18.2 kB/s) Reading package lists... Done Step 8: 安装 Docker CE 包（升级） 从官方 Docker 存储库安装 Docker CE（社区版）包： deploy@VM-4-17-ubuntu:~$ sudo apt-get install docker-ce Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: containerd.io docker-buildx-plugin docker-ce-cli docker-ce-rootless-extras docker-compose-plugin Suggested packages: aufs-tools cgroupfs-mount | cgroup-lite Recommended packages: pigz slirp4netns The following NEW packages will be installed: containerd.io docker-buildx-plugin docker-ce docker-ce-cli docker-ce-rootless-extras docker-compose-plugin 0 upgraded, 6 newly installed, 0 to remove and 0 not upgraded. Need to get 109 MB of archives. After this operation, 395 MB of additional disk space will be used. Do you want to continue? [Y/n] Y Get:1 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 containerd.io amd64 1.6.20-1 [28.3 MB] Get:2 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 docker-buildx-plugin amd64 0.10.4-1~ubuntu.20.04~focal [25.9 MB] Get:3 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 docker-ce-cli amd64 5:23.0.3-1~ubuntu.20.04~focal [13.2 MB] Get:4 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 docker-ce amd64 5:23.0.3-1~ubuntu.20.04~focal [22.0 MB] Get:5 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 docker-ce-rootless-extras amd64 5:23.0.3-1~ubuntu.20.04~focal [8,778 kB] Get:6 https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu focal/stable amd64 docker-compose-plugin amd64 2.17.2-1~ubuntu.20.04~focal [10.9 MB] Fetched 109 MB in 8s (14.1 MB/s) Selecting previously unselected package containerd.io. (Reading database ... 96347 files and directories currently installed.) Preparing to unpack .../0-containerd.io_1.6.20-1_amd64.deb ... Unpacking containerd.io (1.6.20-1) ... Selecting previously unselected package docker-buildx-plugin. Preparing to unpack .../1-docker-buildx-plugin_0.10.4-1~ubuntu.20.04~focal_amd64.deb ... Unpacking docker-buildx-plugin (0.10.4-1~ubuntu.20.04~focal) ... Selecting previously unselected package docker-ce-cli. Preparing to unpack .../2-docker-ce-cli_5%3a23.0.3-1~ubuntu.20.04~focal_amd64.deb ... Unpacking docker-ce-cli (5:23.0.3-1~ubuntu.20.04~focal) ... Selecting previously unselected package docker-ce. Preparing to unpack .../3-docker-ce_5%3a23.0.3-1~ubuntu.20.04~focal_amd64.deb ... Unpacking docker-ce (5:23.0.3-1~ubuntu.20.04~focal) ... Selecting previously unselected package docker-ce-rootless-extras. Preparing to unpack .../4-docker-ce-rootless-extras_5%3a23.0.3-1~ubuntu.20.04~focal_amd64.deb ... Unpacking docker-ce-rootless-extras (5:23.0.3-1~ubuntu.20.04~focal) ... Selecting previously unselected package docker-compose-plugin. Preparing to unpack .../5-docker-compose-plugin_2.17.2-1~ubuntu.20.04~focal_amd64.deb ... Unpacking docker-compose-plugin (2.17.2-1~ubuntu.20.04~focal) ... Setting up docker-buildx-plugin (0.10.4-1~ubuntu.20.04~focal) ... Setting up containerd.io (1.6.20-1) ... Setting up docker-compose-plugin (2.17.2-1~ubuntu.20.04~focal) ... Setting up docker-ce-cli (5:23.0.3-1~ubuntu.20.04~focal) ... Setting up docker-ce-rootless-extras (5:23.0.3-1~ubuntu.20.04~focal) ... Setting up docker-ce (5:23.0.3-1~ubuntu.20.04~focal) ... Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /lib/systemd/system/docker.service. Created symlink /etc/systemd/system/sockets.target.wants/docker.socket → /lib/systemd/system/docker.socket. Processing triggers for man-db (2.9.1-1) ... Processing triggers for systemd (245.4-4ubuntu3.17) ... 顺便把 docker-compose 也安装了： sudo curl -L &quot;https://github.com/docker/compose/releases/download/2.17.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose --version 总结 在 Ubuntu 中将 Docker 升级到最新版本，首先要卸载 docker 的旧版本及其所有依赖项。之后从Docker官方仓库下载最新的 Docker CE 包并安装到系统中。 虽然说是更新，其实全新安装也不过如此。</summary></entry><entry><title type="html">Metaprogramming in Ruby</title><link href="https://hjijin.gz.com/blog/development/Metaprogramming-in-Ruby.html" rel="alternate" type="text/html" title="Metaprogramming in Ruby" /><published>2022-05-12T00:00:00+08:00</published><updated>2022-05-12T00:00:00+08:00</updated><id>https://hjijin.gz.com/blog/development/Metaprogramming-in-Ruby</id><content type="html" xml:base="https://hjijin.gz.com/blog/development/Metaprogramming-in-Ruby.html">&lt;p&gt;Ruby 是一门纯粹的面向对象语言，它魔幻而有趣的。而元编程（Metaprogramming）在 Ruby/Rails 中的应用也让我大开眼界，借着重新阅读这本书的机会，再次感受一次 Ruby 元编程的世界。
在Ruby中，Metaprogramming是一种常见的技术，它可以使开发者在运行时动态地创建、修改、扩展和重定义类、方法和变量等程序元素。&lt;/p&gt;

&lt;p&gt;Ruby中有许多内置的Metaprogramming工具和技术，例如动态定义方法、使用反射API、元编程和元对象等。这些工具和技术使得Ruby成为一种非常灵活和强大的编程语言，同时也使得Ruby的代码更加简洁、易读和易维护。&lt;/p&gt;

&lt;p&gt;Metaprogramming在Ruby中的应用非常广泛，例如Rails框架中的Active Record模块就使用了Metaprogramming来自动生成数据库表和对应的数据模型。另外，Ruby中的DSL（领域特定语言）也是一种常见的Metaprogramming技术，它可以让开发者用更加自然和直观的方式来描述特定领域的问题和解决方案。&lt;/p&gt;
&lt;h3 id=&quot;实例变量方法类&quot;&gt;实例变量、方法、类&lt;/h3&gt;

&lt;h4 id=&quot;对象的实例变量及方法&quot;&gt;对象的实例变量及方法&lt;/h4&gt;
&lt;p&gt;在Ruby中，Metaprogramming可以用来动态地创建、修改和访问对象的实例变量和方法。
实例变量
可以使用Ruby的元编程技术来动态地为一个对象添加实例变量。例如，可以使用instance_variable_set方法来设置一个对象的实例变量：&lt;/p&gt;

&lt;p&gt;class Person
end&lt;/p&gt;

&lt;p&gt;p = Person.new
p.instance_variable_set(“@name”, “John”)
puts p.instance_variable_get(“@name”)  # 输出 “John”
这里使用了instance_variable_set方法来设置一个名为“@name”的实例变量，并使用instance_variable_get方法来获取该实例变量的值。&lt;/p&gt;

&lt;p&gt;方法
可以使用Ruby的元编程技术来动态地为一个对象添加方法。例如，可以使用define_method方法来定义一个新的方法：&lt;/p&gt;

&lt;p&gt;class Person
end&lt;/p&gt;

&lt;p&gt;p = Person.new
Person.define_method(“say_hello”) do
  puts “Hello, I’m a person.”
end&lt;/p&gt;

&lt;p&gt;p.say_hello  # 输出 “Hello, I’m a person.”
这里使用了define_method方法来定义一个名为“say_hello”的方法，并将其绑定到Person类上。在创建一个Person对象后，就可以调用该对象的say_hello方法了。&lt;/p&gt;

&lt;h4 id=&quot;重新认识类&quot;&gt;重新认识类&lt;/h4&gt;

&lt;p&gt;在Ruby中，Metaprogramming可以让开发者重新定义和扩展类，从而实现更加灵活和强大的编程。&lt;/p&gt;

&lt;p&gt;打开类
比如可以随时打开一个类并添加新的方法或修改现有方法。例如，可以使用以下代码来打开String类并添加一个新的方法：
class String
  def reverse_and_upcase
    self.reverse.upcase
  end
end&lt;/p&gt;

&lt;p&gt;puts “hello world”.reverse_and_upcase  # 输出 “DLROW OLLEH”
这里使用了class关键字来打开String类，并在其中定义了一个名为“reverse_and_upcase”的新方法。在调用字符串对象的reverse_and_upcase方法时，就会返回反转并大写后的字符串。&lt;/p&gt;

&lt;p&gt;继承
可以使用继承来扩展类的功能。例如，可以创建一个新的类并继承自现有的类，然后添加新的方法或重写现有方法：&lt;/p&gt;

&lt;p&gt;class Person
  def say_hello
    puts “Hello, I’m a person.”
  end
end&lt;/p&gt;

&lt;p&gt;class Student &amp;lt; Person
  def say_hello
    puts “Hello, I’m a student.”
  end
end&lt;/p&gt;

&lt;p&gt;p = Person.new
s = Student.new&lt;/p&gt;

&lt;p&gt;p.say_hello  # 输出 “Hello, I’m a person.”
s.say_hello  # 输出 “Hello, I’m a student.”
这里创建了一个Person类，并定义了一个名为“say_hello”的方法。然后创建了一个Student类并继承自Person类，并重写了“say_hello”方法。在创建Person和Student对象后，可以调用它们的say_hello方法来查看不同的输出。&lt;/p&gt;

&lt;p&gt;下面的代码有助于你理解这些信息：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 对象的方法即为其所属类的实例方法
str = &apos;abc&apos;
str.methods == str.class.instance_methods
#=&amp;gt; true

# 类的 &quot;溯源&quot;
klass = Class.new
klass.ancestors
#=&amp;gt; [#&amp;lt;Class:0x00007f88831a57d0&amp;gt;, Object, Kernel, BasicObject]

klass.class
#=&amp;gt; Class

klass.superclass
#=&amp;gt; Object

klass.superclass.superclass
#=&amp;gt; BasicObject

klass.superclass.superclass.superclass
#=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;类是开放的&quot;&gt;类是开放的&lt;/h4&gt;
&lt;p&gt;这意味着可以随时打开一个类并添加新的方法或修改现有方法，而不需要继承或使用其他技术。&lt;/p&gt;

&lt;p&gt;例如，可以使用以下代码来打开String类并添加一个新的方法：&lt;/p&gt;

&lt;p&gt;class String
  def reverse_and_upcase
    self.reverse.upcase
  end
end&lt;/p&gt;

&lt;p&gt;puts “hello world”.reverse_and_upcase  # 输出 “DLROW OLLEH”
这里使用了class关键字来打开String类，并在其中定义了一个名为“reverse_and_upcase”的新方法。在调用字符串对象的reverse_and_upcase方法时，就会返回反转并大写后的字符串。&lt;/p&gt;

&lt;p&gt;类是开放的这一特性使得Ruby的Metaprogramming非常强大和灵活。开发者可以使用Metaprogramming来动态地扩展和修改类的行为，从而实现更加灵活和强大的编程。&lt;/p&gt;
&lt;h4 id=&quot;多重initialize方法&quot;&gt;多重initialize方法&lt;/h4&gt;
&lt;p&gt;在Ruby中，可以使用Metaprogramming来为一个类定义多个initialize方法，从而实现更加灵活和强大的对象初始化。&lt;/p&gt;

&lt;p&gt;例如，可以使用以下代码来为一个类定义两个initialize方法：&lt;/p&gt;

&lt;p&gt;class Person
  def initialize(name)
    @name = name
  end&lt;/p&gt;

&lt;p&gt;def initialize(name, age)
    @name = name
    @age = age
  end
end&lt;/p&gt;

&lt;p&gt;p1 = Person.new(“John”)
p2 = Person.new(“Mary”, 25)
这里为Person类定义了两个initialize方法，一个接收一个参数（name），另一个接收两个参数（name和age）。在创建Person对象时，可以根据需要选择使用不同的initialize方法。&lt;/p&gt;

&lt;p&gt;需要注意的是，Ruby中只允许一个类定义一个initialize方法，因为initialize方法是一个特殊的方法，用于初始化对象的状态。如果一个类定义了多个initialize方法，只会执行最后一个被定义的方法。因此，在使用Metaprogramming定义多个initialize方法时，应该使用其他方法名来避免冲突。&lt;/p&gt;

&lt;p&gt;例如，可以使用以下代码来为一个类定义多个初始化方法：&lt;/p&gt;

&lt;p&gt;class Person
  def initialize_name(name)
    @name = name
  end&lt;/p&gt;

&lt;p&gt;def initialize_name_and_age(name, age)
    @name = name
    @age = age
  end
end&lt;/p&gt;

&lt;p&gt;p1 = Person.new_name(“John”)
p2 = Person.new_name_and_age(“Mary”, 25)
这里为Person类定义了两个初始化方法，分别命名为“initialize_name”和“initialize_name_and_age”。在创建Person对象时，可以根据需要选择使用不同的方法来初始化对象的状态。&lt;/p&gt;
&lt;h4 id=&quot;匿名类&quot;&gt;匿名类&lt;/h4&gt;

&lt;p&gt;可以使用Metaprogramming创建匿名类（Anonymous Class），这是一种没有名字的类，可以用于临时存储数据或实现特定功能。&lt;/p&gt;

&lt;p&gt;例如，可以使用以下代码创建一个匿名类，并为该类动态地定义一个方法：&lt;/p&gt;

&lt;p&gt;person_class = Class.new do
  def say_hello
    puts “Hello, I’m a person.”
  end
end&lt;/p&gt;

&lt;p&gt;p = person_class.new
p.say_hello  # 输出 “Hello, I’m a person.”
这里使用了Class.new方法来创建一个匿名类，并在其中动态地定义了一个名为“say_hello”的方法。然后创建了一个该类的对象，并调用了其say_hello方法。&lt;/p&gt;

&lt;p&gt;匿名类的创建在Ruby中非常常见，它可以用于实现一些简单的功能或存储一些临时数据。同时，匿名类也可以被用于实现一些高级的设计模式，例如装饰器模式和代理模式等。&lt;/p&gt;

&lt;p&gt;需要注意的是，由于匿名类没有名字，因此在使用Metaprogramming创建匿名类时，应该为其定义一个变量或常量来引用该类，以便后续使用。&lt;/p&gt;</content><author><name>Jim Huang</name><email>hjijin.gz@gmail.com</email></author><category term="development" /><category term="server" /><category term="ruby" /><summary type="html">Ruby 是一门纯粹的面向对象语言，它魔幻而有趣的。而元编程（Metaprogramming）在 Ruby/Rails 中的应用也让我大开眼界，借着重新阅读这本书的机会，再次感受一次 Ruby 元编程的世界。 在Ruby中，Metaprogramming是一种常见的技术，它可以使开发者在运行时动态地创建、修改、扩展和重定义类、方法和变量等程序元素。 Ruby中有许多内置的Metaprogramming工具和技术，例如动态定义方法、使用反射API、元编程和元对象等。这些工具和技术使得Ruby成为一种非常灵活和强大的编程语言，同时也使得Ruby的代码更加简洁、易读和易维护。 Metaprogramming在Ruby中的应用非常广泛，例如Rails框架中的Active Record模块就使用了Metaprogramming来自动生成数据库表和对应的数据模型。另外，Ruby中的DSL（领域特定语言）也是一种常见的Metaprogramming技术，它可以让开发者用更加自然和直观的方式来描述特定领域的问题和解决方案。 实例变量、方法、类 对象的实例变量及方法 在Ruby中，Metaprogramming可以用来动态地创建、修改和访问对象的实例变量和方法。 实例变量 可以使用Ruby的元编程技术来动态地为一个对象添加实例变量。例如，可以使用instance_variable_set方法来设置一个对象的实例变量： class Person end p = Person.new p.instance_variable_set(“@name”, “John”) puts p.instance_variable_get(“@name”) # 输出 “John” 这里使用了instance_variable_set方法来设置一个名为“@name”的实例变量，并使用instance_variable_get方法来获取该实例变量的值。 方法 可以使用Ruby的元编程技术来动态地为一个对象添加方法。例如，可以使用define_method方法来定义一个新的方法： class Person end p = Person.new Person.define_method(“say_hello”) do puts “Hello, I’m a person.” end p.say_hello # 输出 “Hello, I’m a person.” 这里使用了define_method方法来定义一个名为“say_hello”的方法，并将其绑定到Person类上。在创建一个Person对象后，就可以调用该对象的say_hello方法了。 重新认识类 在Ruby中，Metaprogramming可以让开发者重新定义和扩展类，从而实现更加灵活和强大的编程。 打开类 比如可以随时打开一个类并添加新的方法或修改现有方法。例如，可以使用以下代码来打开String类并添加一个新的方法： class String def reverse_and_upcase self.reverse.upcase end end puts “hello world”.reverse_and_upcase # 输出 “DLROW OLLEH” 这里使用了class关键字来打开String类，并在其中定义了一个名为“reverse_and_upcase”的新方法。在调用字符串对象的reverse_and_upcase方法时，就会返回反转并大写后的字符串。 继承 可以使用继承来扩展类的功能。例如，可以创建一个新的类并继承自现有的类，然后添加新的方法或重写现有方法： class Person def say_hello puts “Hello, I’m a person.” end end class Student &amp;lt; Person def say_hello puts “Hello, I’m a student.” end end p = Person.new s = Student.new p.say_hello # 输出 “Hello, I’m a person.” s.say_hello # 输出 “Hello, I’m a student.” 这里创建了一个Person类，并定义了一个名为“say_hello”的方法。然后创建了一个Student类并继承自Person类，并重写了“say_hello”方法。在创建Person和Student对象后，可以调用它们的say_hello方法来查看不同的输出。 下面的代码有助于你理解这些信息： # 对象的方法即为其所属类的实例方法 str = &apos;abc&apos; str.methods == str.class.instance_methods #=&amp;gt; true # 类的 &quot;溯源&quot; klass = Class.new klass.ancestors #=&amp;gt; [#&amp;lt;Class:0x00007f88831a57d0&amp;gt;, Object, Kernel, BasicObject] klass.class #=&amp;gt; Class klass.superclass #=&amp;gt; Object klass.superclass.superclass #=&amp;gt; BasicObject klass.superclass.superclass.superclass #=&amp;gt; nil 类是开放的 这意味着可以随时打开一个类并添加新的方法或修改现有方法，而不需要继承或使用其他技术。 例如，可以使用以下代码来打开String类并添加一个新的方法： class String def reverse_and_upcase self.reverse.upcase end end puts “hello world”.reverse_and_upcase # 输出 “DLROW OLLEH” 这里使用了class关键字来打开String类，并在其中定义了一个名为“reverse_and_upcase”的新方法。在调用字符串对象的reverse_and_upcase方法时，就会返回反转并大写后的字符串。 类是开放的这一特性使得Ruby的Metaprogramming非常强大和灵活。开发者可以使用Metaprogramming来动态地扩展和修改类的行为，从而实现更加灵活和强大的编程。 多重initialize方法 在Ruby中，可以使用Metaprogramming来为一个类定义多个initialize方法，从而实现更加灵活和强大的对象初始化。 例如，可以使用以下代码来为一个类定义两个initialize方法： class Person def initialize(name) @name = name end def initialize(name, age) @name = name @age = age end end p1 = Person.new(“John”) p2 = Person.new(“Mary”, 25) 这里为Person类定义了两个initialize方法，一个接收一个参数（name），另一个接收两个参数（name和age）。在创建Person对象时，可以根据需要选择使用不同的initialize方法。 需要注意的是，Ruby中只允许一个类定义一个initialize方法，因为initialize方法是一个特殊的方法，用于初始化对象的状态。如果一个类定义了多个initialize方法，只会执行最后一个被定义的方法。因此，在使用Metaprogramming定义多个initialize方法时，应该使用其他方法名来避免冲突。 例如，可以使用以下代码来为一个类定义多个初始化方法： class Person def initialize_name(name) @name = name end def initialize_name_and_age(name, age) @name = name @age = age end end p1 = Person.new_name(“John”) p2 = Person.new_name_and_age(“Mary”, 25) 这里为Person类定义了两个初始化方法，分别命名为“initialize_name”和“initialize_name_and_age”。在创建Person对象时，可以根据需要选择使用不同的方法来初始化对象的状态。 匿名类 可以使用Metaprogramming创建匿名类（Anonymous Class），这是一种没有名字的类，可以用于临时存储数据或实现特定功能。 例如，可以使用以下代码创建一个匿名类，并为该类动态地定义一个方法： person_class = Class.new do def say_hello puts “Hello, I’m a person.” end end p = person_class.new p.say_hello # 输出 “Hello, I’m a person.” 这里使用了Class.new方法来创建一个匿名类，并在其中动态地定义了一个名为“say_hello”的方法。然后创建了一个该类的对象，并调用了其say_hello方法。 匿名类的创建在Ruby中非常常见，它可以用于实现一些简单的功能或存储一些临时数据。同时，匿名类也可以被用于实现一些高级的设计模式，例如装饰器模式和代理模式等。 需要注意的是，由于匿名类没有名字，因此在使用Metaprogramming创建匿名类时，应该为其定义一个变量或常量来引用该类，以便后续使用。</summary></entry><entry><title type="html">Object-Oriented as i understand</title><link href="https://hjijin.gz.com/blog/development/object-oriented-as-i-understand.html" rel="alternate" type="text/html" title="Object-Oriented as i understand" /><published>2022-05-10T00:00:00+08:00</published><updated>2022-05-10T00:00:00+08:00</updated><id>https://hjijin.gz.com/blog/development/object-oriented-as-i-understand</id><content type="html" xml:base="https://hjijin.gz.com/blog/development/object-oriented-as-i-understand.html">&lt;p&gt;面向对象编程(Object-Oriented Programming)，简称OOP。
Ruby 是一门纯面向对象的编程语言，一切事物在 Ruby 中都是对象，Ruby 中的每个值都是一个对象。&lt;/p&gt;

&lt;h3 id=&quot;基本特征&quot;&gt;基本特征&lt;/h3&gt;

&lt;p&gt;面向对象语言（Object-Oriented Language）是一类以对象作为基本程序结构单位的程序设计语言，指用于描述的设计是以对象为核心，而对象是程序运行时刻的基本成分。
是一种通过对象的方式，把现实世界映射到计算机模型的一种编程方法。&lt;/p&gt;

&lt;p&gt;OOP 中的基本编程概念是：抽象化、多态性、封装形式、继承。
抽象通过建模适合该问题的类来简化复杂的现实；多态性是将运算符或函数以不同方式用于不同数据输入的过程；封装对其他对象隐藏了类的实现细节；继承是一种使用已经定义的类形成新类的方法。&lt;/p&gt;

&lt;h4 id=&quot;ruby-对象&quot;&gt;Ruby 对象&lt;/h4&gt;

&lt;p&gt;对象是 Ruby OOP 程序的基本构建块，是数据和方法的组合。在 OOP 程序中，我们创建对象，这些对象通过方法进行通信，每个对象都可以接收消息，发送消息和处理数据。
创建对象有两个步骤， 首先，我们定义一个类：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/ruby

# 创建一个简单的对象，主体还是空的，没有任何数据或方法
class Student

end

# 创建 Student 类的新实例
s = Student.new
puts s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;类是对象的模板，描述了类对象共享的状态和行为，一个类可以用来创建许多对象，在运行时从类创建的对象称为该特定类的实例。&lt;/p&gt;

&lt;h4 id=&quot;ruby-构造函数&quot;&gt;Ruby 构造函数&lt;/h4&gt;

&lt;p&gt;构造函数是一种特殊的方法，创建对象时会自动调用它。构造函数不返回值，目的是初始化对象的状态。而Ruby 中的构造函数称为 initialize。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/ruby

class Student
  def initialize
    puts &quot;auto called&quot;
  end
end

Student.new
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对象的属性是捆绑在该对象内部的数据项，也称为实例变量或成员字段。实例变量是在类中定义的变量，该类中的每个对象都有一个单独的副本。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/ruby

class Student

  # 构造函数是称为 initialize 的方法，该方法在创建实例对象时被调用
  def initialize name
    @name = name
  end

  # 定义方法返回成员字段
  def get_name
    @name # 是一个实例变量
  end
end

# 创建 Student 类的两个对象，字符串参数传递给每个对象构造函数，名称存储在每个对象唯一的实例变量中
s1 = Student.new &quot;Jim&quot;
s2 = Student.new &quot;Lam&quot;

# 通过在每个对象上调用 get_name 来打印成员字段
puts s1.get_name
puts s2.get_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从下面的程序输出可以看到 Student 类的每个实例都有其自己的名称成员字段&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ ruby student.rb
Jim
Lam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ruby-构造函数重载&quot;&gt;Ruby 构造函数重载&lt;/h4&gt;

&lt;p&gt;构造函数重载是在一个类中具有多种类型的构造函数的能力，这样可以创建具有不同数量或不同类型参数的对象。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/ruby

class Student

  def initialize name=&quot;unknown&quot;, age=0
    @name = name
    @age = age
  end

  def to_s
    &quot;Student Name: #{@name}, Age: #{@age}.&quot;
  end
end

s1 = Student.new
s2 = Student.new &quot;unknown&quot;, 17
s3 = Student.new &quot;Jim&quot;, 22
s4 = Student.new &quot;Lam&quot;, 18

p s1.to_s, s2.to_s, s3.to_s, s4.to_s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ruby-方法&quot;&gt;Ruby 方法&lt;/h4&gt;

&lt;p&gt;方法是在类主体内定义的函数，它们用于通过对象的属性执行操作。 在 OOP 范式的封装概念中，方法对于划分编程中的职责至关重要。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/ruby

class Student

  def initialize name=&quot;unknown&quot;, age=0
    @name = name
    @age = age
  end

  def get_info
    &quot;Student Name: #{@name}, Age: #{@age}.&quot;
  end
end

s = Student.new &quot;Jim&quot;, 22

# 两种调用方法的方式
puts s.get_info
puts s.send :get_info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ruby-继承&quot;&gt;Ruby 继承&lt;/h4&gt;

&lt;p&gt;继承是一种使用已经定义的类形成新类的方法，新形成的类称为派生的类，我们派生的类称为基类，继承的重要好处是代码重用和降低程序的复杂性。派生类（后代）将覆盖或扩展基类（祖先）的功能。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/ruby

# 基类
class Person

  def initialize
    puts &quot;this is base class&quot;
  end
end

# 派生类，派生类继承自基类
class Student &amp;lt; Person

  def initialize
    super # super 方法调用父类的构造函数
    puts &quot;Human class created&quot;
  end
end

Person.new
Student.new
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在实际的业务中，对象关系可能更复杂，一个对象可以有多个祖先。 但是 Ruby 有一个方法 ancestors，它提供了特定类的祖先列表，每个 Ruby 对象自动是 Object 和 BasicObject 类以及 Kernel 模块的后代。 它们内置在 Ruby 语言的核心中。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/ruby

class Person 
end

class HeadMaster &amp;lt; Person 
end

class Teacher &amp;lt; HeadMaster
end

class CNTeacher &amp;lt; Teacher 
end

p CNTeacher.ancestors # =&amp;gt; [CNTeacher, Teacher, HeadMaster, Person, Object, PP::ObjectMixin, Kernel, BasicObject]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ruby-super-方法&quot;&gt;Ruby super 方法&lt;/h4&gt;

&lt;p&gt;super 方法在父类的类中调用相同名称的方法。如果该方法没有参数，它将自动传递其所有参数，如果我们写 super()，则不会将任何参数传递给父方法。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/ruby

class Base
  def show x=0, y=0
    p &quot;Base class, x: #{x}, y: #{y}&quot;
  end
end

class Derived &amp;lt; Base
  def show x, y
    super
    super x
    super x, y
    super()
  end
end

d = Derived.new
d.show 3, 3

# 输出结果
❯ ruby super.rb
&quot;Base class, x: 3, y: 3&quot;
&quot;Base class, x: 3, y: 0&quot;
&quot;Base class, x: 3, y: 3&quot;
&quot;Base class, x: 0, y: 0&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从输出结果可以看到，不带任何参数的 super 方法使用传递给 Derived 类的 show 方法的参数调用父级的 show 方法：此处，x = 3 和 y = 3。 
super() 方法不将任何参数传递给父级的 show 方法。&lt;/p&gt;

&lt;h4 id=&quot;小结&quot;&gt;小结&lt;/h4&gt;

&lt;p&gt;面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。Class 是一种抽象概念，比如我们定义的 Class—Student，是指学生这个概念，而实例（Instance）则是一个个具体的 Student，比如，Jim 和 Lam 是两个具体的 Student。所以，面向对象的设计思想是抽象出 Class，根据 Class 创建 Instance。面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。
数据封装、继承和多态是面向对象的三大特点需要谨记。&lt;/p&gt;</content><author><name>Jim Huang</name><email>hjijin.gz@gmail.com</email></author><category term="development" /><category term="server" /><category term="ruby" /><summary type="html">面向对象编程(Object-Oriented Programming)，简称OOP。 Ruby 是一门纯面向对象的编程语言，一切事物在 Ruby 中都是对象，Ruby 中的每个值都是一个对象。 基本特征 面向对象语言（Object-Oriented Language）是一类以对象作为基本程序结构单位的程序设计语言，指用于描述的设计是以对象为核心，而对象是程序运行时刻的基本成分。 是一种通过对象的方式，把现实世界映射到计算机模型的一种编程方法。 OOP 中的基本编程概念是：抽象化、多态性、封装形式、继承。 抽象通过建模适合该问题的类来简化复杂的现实；多态性是将运算符或函数以不同方式用于不同数据输入的过程；封装对其他对象隐藏了类的实现细节；继承是一种使用已经定义的类形成新类的方法。 Ruby 对象 对象是 Ruby OOP 程序的基本构建块，是数据和方法的组合。在 OOP 程序中，我们创建对象，这些对象通过方法进行通信，每个对象都可以接收消息，发送消息和处理数据。 创建对象有两个步骤， 首先，我们定义一个类： #!/usr/bin/ruby # 创建一个简单的对象，主体还是空的，没有任何数据或方法 class Student end # 创建 Student 类的新实例 s = Student.new puts s 类是对象的模板，描述了类对象共享的状态和行为，一个类可以用来创建许多对象，在运行时从类创建的对象称为该特定类的实例。 Ruby 构造函数 构造函数是一种特殊的方法，创建对象时会自动调用它。构造函数不返回值，目的是初始化对象的状态。而Ruby 中的构造函数称为 initialize。 #!/usr/bin/ruby class Student def initialize puts &quot;auto called&quot; end end Student.new 对象的属性是捆绑在该对象内部的数据项，也称为实例变量或成员字段。实例变量是在类中定义的变量，该类中的每个对象都有一个单独的副本。 #!/usr/bin/ruby class Student # 构造函数是称为 initialize 的方法，该方法在创建实例对象时被调用 def initialize name @name = name end # 定义方法返回成员字段 def get_name @name # 是一个实例变量 end end # 创建 Student 类的两个对象，字符串参数传递给每个对象构造函数，名称存储在每个对象唯一的实例变量中 s1 = Student.new &quot;Jim&quot; s2 = Student.new &quot;Lam&quot; # 通过在每个对象上调用 get_name 来打印成员字段 puts s1.get_name puts s2.get_name 从下面的程序输出可以看到 Student 类的每个实例都有其自己的名称成员字段 ❯ ruby student.rb Jim Lam Ruby 构造函数重载 构造函数重载是在一个类中具有多种类型的构造函数的能力，这样可以创建具有不同数量或不同类型参数的对象。 #!/usr/bin/ruby class Student def initialize name=&quot;unknown&quot;, age=0 @name = name @age = age end def to_s &quot;Student Name: #{@name}, Age: #{@age}.&quot; end end s1 = Student.new s2 = Student.new &quot;unknown&quot;, 17 s3 = Student.new &quot;Jim&quot;, 22 s4 = Student.new &quot;Lam&quot;, 18 p s1.to_s, s2.to_s, s3.to_s, s4.to_s Ruby 方法 方法是在类主体内定义的函数，它们用于通过对象的属性执行操作。 在 OOP 范式的封装概念中，方法对于划分编程中的职责至关重要。 #!/usr/bin/ruby class Student def initialize name=&quot;unknown&quot;, age=0 @name = name @age = age end def get_info &quot;Student Name: #{@name}, Age: #{@age}.&quot; end end s = Student.new &quot;Jim&quot;, 22 # 两种调用方法的方式 puts s.get_info puts s.send :get_info Ruby 继承 继承是一种使用已经定义的类形成新类的方法，新形成的类称为派生的类，我们派生的类称为基类，继承的重要好处是代码重用和降低程序的复杂性。派生类（后代）将覆盖或扩展基类（祖先）的功能。 #!/usr/bin/ruby # 基类 class Person def initialize puts &quot;this is base class&quot; end end # 派生类，派生类继承自基类 class Student &amp;lt; Person def initialize super # super 方法调用父类的构造函数 puts &quot;Human class created&quot; end end Person.new Student.new 在实际的业务中，对象关系可能更复杂，一个对象可以有多个祖先。 但是 Ruby 有一个方法 ancestors，它提供了特定类的祖先列表，每个 Ruby 对象自动是 Object 和 BasicObject 类以及 Kernel 模块的后代。 它们内置在 Ruby 语言的核心中。 #!/usr/bin/ruby class Person end class HeadMaster &amp;lt; Person end class Teacher &amp;lt; HeadMaster end class CNTeacher &amp;lt; Teacher end p CNTeacher.ancestors # =&amp;gt; [CNTeacher, Teacher, HeadMaster, Person, Object, PP::ObjectMixin, Kernel, BasicObject] Ruby super 方法 super 方法在父类的类中调用相同名称的方法。如果该方法没有参数，它将自动传递其所有参数，如果我们写 super()，则不会将任何参数传递给父方法。 #!/usr/bin/ruby class Base def show x=0, y=0 p &quot;Base class, x: #{x}, y: #{y}&quot; end end class Derived &amp;lt; Base def show x, y super super x super x, y super() end end d = Derived.new d.show 3, 3 # 输出结果 ❯ ruby super.rb &quot;Base class, x: 3, y: 3&quot; &quot;Base class, x: 3, y: 0&quot; &quot;Base class, x: 3, y: 3&quot; &quot;Base class, x: 0, y: 0&quot; 从输出结果可以看到，不带任何参数的 super 方法使用传递给 Derived 类的 show 方法的参数调用父级的 show 方法：此处，x = 3 和 y = 3。 super() 方法不将任何参数传递给父级的 show 方法。 小结 面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。Class 是一种抽象概念，比如我们定义的 Class—Student，是指学生这个概念，而实例（Instance）则是一个个具体的 Student，比如，Jim 和 Lam 是两个具体的 Student。所以，面向对象的设计思想是抽象出 Class，根据 Class 创建 Instance。面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。 数据封装、继承和多态是面向对象的三大特点需要谨记。</summary></entry><entry><title type="html">Use Let’s Encrypt add HTTPS to your Website</title><link href="https://hjijin.gz.com/blog/development/use-lets-encrypt-add-https-to-your-website.html" rel="alternate" type="text/html" title="Use Let’s Encrypt add HTTPS to your Website" /><published>2018-09-13T00:00:00+08:00</published><updated>2018-09-13T00:00:00+08:00</updated><id>https://hjijin.gz.com/blog/development/use-lets-encrypt-add-https-to-your-website</id><content type="html" xml:base="https://hjijin.gz.com/blog/development/use-lets-encrypt-add-https-to-your-website.html">&lt;p&gt;今天我将公司的主站变成了 HTTPS 安全访问，不是因为网站被国内的电信运营商在访问时加入了一些弹窗广告，也不是 HTTP 的网站在搜索引擎中的 rank 会更低，只是因为给微信小程序提供的接口只支持 HTTPS，这没办法，顺便记录下我启用 HTTPS 的过程。
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id=&quot;一背景知识&quot;&gt;一、背景知识&lt;/h3&gt;

&lt;p&gt;可能你需要了解一下：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/19577317&quot;&gt;1、http 和 https 有何区别？如何灵活使用？&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html&quot;&gt;2、SSL/TLS协议运行机制的概述&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/29022279&quot;&gt;3、为什么要部署 https？&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;二生成-lets-encrypt-证书&quot;&gt;二、生成 Let’s Encrypt 证书&lt;/h3&gt;

&lt;p&gt;现在国内的很多云服务商也提供收费和免费的方案，我用的是 &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; 这个免费的解决方案。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let’s Encrypt由互联网安全研究小组（缩写ISRG）提供服务。主要赞助商包括电子前哨基金会、Mozilla基金会、Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。
用以实现新的数字证书认证机构的协议被称为自动证书管理环境（ACME）。GitHub上有这一规范的草案，且提案的一个版本已作为一个Internet草案发布。
Let’s Encrypt宣称这一过程将十分简单、自动化并且免费。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上介绍文字来自维基百科的 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Let%27s_Encrypt&quot;&gt;Let’s Encrypt&lt;/a&gt; 词条。&lt;/p&gt;

&lt;p&gt;Let’s Encrypt 证书生成不需要手动进行，官方推荐 &lt;a href=&quot;https://certbot.eff.org/&quot;&gt;certbot&lt;/a&gt; 这套自动化工具来实现，所以只需要就可以轻松搞定：&lt;/p&gt;

&lt;h4 id=&quot;1-下载安装-certbot-lets-encrypt项目的自动化工具&quot;&gt;1. 下载安装 certbot (Let’s Encrypt项目的自动化工具)&lt;/h4&gt;

&lt;p&gt;直接打开 &lt;a href=&quot;https://certbot.eff.org/&quot;&gt;certbot&lt;/a&gt; 网站上，选择你的 Web Server 和 操作系统，就能看到对应的安装和配置教程。
比如，我选的 nginx 和 Ubuntu 16.04，然后下面就会展示一个安装教程网页。你就照着做一遍就好了。&lt;/p&gt;

&lt;h5 id=&quot;11-安装系统环境依赖&quot;&gt;1.1 安装系统环境依赖&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;software-properties-common
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:certbot/certbot
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python-certbot-nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;12-然后运行如下命令&quot;&gt;1.2 然后，运行如下命令：&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;certbot &lt;span class=&quot;nt&quot;&gt;--nginx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;安装开始后会让你输入一个用于接受紧急更新和安全通知的邮箱，然后 certbot 会自动检查到你的 nginx.conf 下的配置，把你所有的虚拟站点都列出来，然后让你选择需要开启 https 的站点。你就简单的输入列表编号（用空格分开），然后，certbot 就帮你下载证书并更新 nginx.conf 了。&lt;/p&gt;

&lt;h4 id=&quot;2-配置文件&quot;&gt;2. 配置文件&lt;/h4&gt;

&lt;p&gt;在你的服务器找到 Nginx 的配置文件 &lt;strong&gt;nginx.conf&lt;/strong&gt;，可以发现你的文件中的 server 配置可能多了如下的修改：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:443 ssl &lt;span class=&quot;nv&quot;&gt;ipv6only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
  listen 443 ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
  ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
  ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
  include /etc/letsencrypt/options-ssl-nginx.conf&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; example.com&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;301 https://&lt;span class=&quot;nv&quot;&gt;$host$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;

    listen 80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    server_name example.com&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;404&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里建议配置 http2,作用是启用 Nginx 的 &lt;a href=&quot;https://nginx.org/en/docs/http/ngx_http_v2_module.html&quot;&gt;ngx_http_v2_module 模块&lt;/a&gt;  支持 HTTP2，Nginx 版本需要高于 1.9.5。开启HTTP/2其实很简单，只需要在 nginx.conf 的 listen 443 ssl; 后面加上 http2 就可以：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:443 ssl &lt;span class=&quot;nv&quot;&gt;ipv6only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
  listen 443 ssl http2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
  ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
  ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
  include /etc/letsencrypt/options-ssl-nginx.conf&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# managed by Certbot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后重启 Nginx ：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;三自动化更新证书&quot;&gt;三、自动化更新证书&lt;/h4&gt;

&lt;p&gt;Let’s Encrypt 证书有效期是3个月，我们可以通过 certbot 来自动化续期。Linux 系统设置自动化的更新脚本，我用 crontab，使用 crontab -e 命令加入如下的定时作业：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 每个月都强制更新一下&lt;/span&gt;
0 0 1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /usr/bin/certbot renew &lt;span class=&quot;nt&quot;&gt;--force-renewal&lt;/span&gt;
5 0 1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /usr/sbin/service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;你也可以设置你想要的方式，如想了解更多关于 &lt;a href=&quot;https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html&quot;&gt;crontab 定时任务&lt;/a&gt; 的用法可以点击查看。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;启用HTTPS后，你的网页中的所有的使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&lt;/code&gt; 的方式的地方都要改成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;用专业在线工具测试你的服务器 SSL 安全性：&lt;a href=&quot;https://www.ssllabs.com/ssltest/index.html&quot;&gt;Qualys SSL Labs&lt;/a&gt; 提供了全面的 SSL 安全性测试，填写你的网站域名，给自己的 HTTPS 配置打个分。&lt;/p&gt;

&lt;p&gt;ok, give me five!&lt;/p&gt;</content><author><name>Jim Huang</name><email>hjijin.gz@gmail.com</email></author><category term="development" /><category term="server" /><category term="Linux" /><summary type="html">今天我将公司的主站变成了 HTTPS 安全访问，不是因为网站被国内的电信运营商在访问时加入了一些弹窗广告，也不是 HTTP 的网站在搜索引擎中的 rank 会更低，只是因为给微信小程序提供的接口只支持 HTTPS，这没办法，顺便记录下我启用 HTTPS 的过程。</summary></entry><entry><title type="html">如何在 Rails 项目中配置 RSpec</title><link href="https://hjijin.gz.com/blog/development/how-to-configure-rspec-in-ruby-on-rails.html" rel="alternate" type="text/html" title="如何在 Rails 项目中配置 RSpec" /><published>2018-08-17T00:00:00+08:00</published><updated>2018-08-17T00:00:00+08:00</updated><id>https://hjijin.gz.com/blog/development/how-to-configure-rspec-in-ruby-on-rails</id><content type="html" xml:base="https://hjijin.gz.com/blog/development/how-to-configure-rspec-in-ruby-on-rails.html">&lt;p&gt;初级开发人员如何在项目中设置 RSpec： Rails 5.2, RSpec 3.7, Factory Bot, Database Cleaner&lt;/p&gt;

&lt;p&gt;文章写于 2018-08-09， 适用于当前版本 gem。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;在新项目中配置&quot;&gt;在新项目中配置&lt;/h3&gt;

&lt;p&gt;假设读者已经阅读过 &lt;a href=&quot;https://pragprog.com/book/rails51/agile-web-development-with-rails-5-1&quot;&gt;Agile Web Development with Rails&lt;/a&gt;
 或者 &lt;a href=&quot;https://guides.rubyonrails.org/getting_started.html&quot;&gt;RailsGuides&lt;/a&gt; 并且在自己的计算机上安装好 Ruby 和 Ruby on Rails 环境。&lt;/p&gt;

&lt;p&gt;我们将新建一个没有 Ruby on Rails 原生测试的项目，你可以执行以下命令查看新项目的所有选项：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails new &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建不带测试的项目你可以执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails new my_rspec_project_name &lt;span class=&quot;nt&quot;&gt;--skip-test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接着用你熟悉的编辑器打开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; 找到这段 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group :development, :test&lt;/code&gt; 往里面写入以下 gems:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Gemfile&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;database_cleaner&apos;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;factory_bot_rails&apos;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;rspec-rails&apos;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;faker&apos;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;上面这一步很重要，这些 gem 加入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group :development, :test&lt;/code&gt; 而不是  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group :test&lt;/code&gt;。像 &lt;strong&gt;rails generate …&lt;/strong&gt; 在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;development&lt;/code&gt;环境下运行默认命令，如果你不这样执行： &lt;strong&gt;RAILS_ENV=test rails generate …&lt;/strong&gt;它们不会选择在测试环境覆盖默认配置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在安装 gems：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;生成 RSpec 的配置文件&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails generate rspec:install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;更多信息： &lt;a href=&quot;https://github.com/rspec/rspec-rails&quot;&gt;rspec-rails&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样你应该能够使用 RSpec 测试和 FactoryBot 工厂生成 Rails 模型&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails generate model worker name:string age:integer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;…在你执行上面的命令后你应该可以看到以下输出：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;invoke  active_record
create    db/migrate/20180809131148_create_workers.rb
create    app/models/worker.rb
invoke    rspec
create      spec/models/worker_spec.rb
invoke      factory_bot
create        spec/factories/workers.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如你所见，这个命令生成了带有内容的数据迁移文件文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db/migrate/20180809131148_create_workers.rb&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateWorkers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:workers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timestamps&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以运行数据迁移：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# migrations for develompent environment&lt;/span&gt;
rake db:migrate

&lt;span class=&quot;c&quot;&gt;# migrations for test environment&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;rake db:migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这将生成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workers&lt;/code&gt; 数据表。&lt;/p&gt;

&lt;h3 id=&quot;开始写一些测试&quot;&gt;开始写一些测试&lt;/h3&gt;

&lt;p&gt;打开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/models/worker_spec.rb&lt;/code&gt; 写你的第一个 “failing” 的测试:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;rails_helper&apos;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在终端 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rspec spec.&lt;/code&gt; 你应该看到这样的输出：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Failures:

  1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Worker should eq 0
     Failure/Error: expect&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 + 200&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.to eq&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

       expected: 0
            got: 201

       &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;compared using &lt;span class=&quot;o&quot;&gt;==)&lt;/span&gt;
     &lt;span class=&quot;c&quot;&gt;# ./spec/models/worker_spec.rb:6:in `block (2 levels) in &amp;lt;main&amp;gt;&apos;&lt;/span&gt;

Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.00714 seconds &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;files took 0.59673 seconds to load&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
3 examples, 1 failure, 1 pending

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;好极了！现在让我们做一写修改来通过这个测试：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;改成：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在你应该看到类似这样的输出：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Finished &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.00328 seconds &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;files took 0.61603 seconds to load&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
3 examples, 0 failures, 1 pending
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不要担心 “pending” 测试，你可以稍后删除它们。重要的是你有 0 failures， 这意味着你通过了测试。&lt;/p&gt;

&lt;h3 id=&quot;配合-factories-factorybot-使用&quot;&gt;配合 Factories (FactoryBot) 使用&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md&quot;&gt;GETTING_STARTED&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;图书 &lt;a href=&quot;https://pragprog.com/book/rails51/agile-web-development-with-rails-5-1&quot;&gt;Agile Web Development with Rails&lt;/a&gt; 结合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fixture&lt;/code&gt; 来写有效的测试，但是我们的目的不是那样，我们用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Factories&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;你可以在本文 &lt;a href=&quot;https://robots.thoughtbot.com/why-factories&quot;&gt;Why Factories?&lt;/a&gt; 中阅读更多有关 Factories 的信息&lt;/p&gt;

&lt;p&gt;我们将使用 &lt;a href=&quot;https://github.com/thoughtbot/factory_bot_rails&quot;&gt;FactoryBot&lt;/a&gt; 这个库，&lt;/p&gt;

&lt;p&gt;在开始之前，我们需要修改一下配置，打开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/rails_helper.rb&lt;/code&gt; 然后在 RSpec 配置块里添加这一行：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FactoryBot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Syntax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Methods&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这将确保我们可以在本地 RSpec 测试中使用 Factory Bot 语法。&lt;/p&gt;

&lt;p&gt;打开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/factories/workers.rb&lt;/code&gt; f文件并更改自动生成的内容：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;FactoryBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:worker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MyString&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;FactoryBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:worker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ezo&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在打开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/models/worker_spec.rb&lt;/code&gt; 并添加一个测试：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;rails_helper&apos;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ....&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;default worker details&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:worker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;should initialize worker with name and age&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ezo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;default worker details&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:worker&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;should initialize worker with name and age&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ezo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rspec spec&lt;/code&gt; 所有测试都应该通过： &lt;strong&gt;4 examples, 0 failures, 1 pending&lt;/strong&gt;
这些都是很简单的测试，前面我们在数据库中创建一些属性，现在测试是否具有这些属性值。&lt;/p&gt;

&lt;p&gt;实际上，你将使用 RSpec 测试更复杂的逻辑，例如：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trigger_money_transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bank_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:account&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;should transfer buch of money to my Account&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bank_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;trigger_money_transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bank_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bank_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;B.T.W. FactoryBot 是从旧版 &lt;a href=&quot;https://robots.thoughtbot.com/factory_bot&quot;&gt;FactoryGirl&lt;/a&gt; 的重写而来，如果你在互联网上发现关于 FactoryGirl 的特性，大多在 FactoryBot 上都适用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;database-cleaner&quot;&gt;Database cleaner&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/DatabaseCleaner/database_cleaner&quot;&gt;DatabaseCleaner&lt;/a&gt; 是一个可以帮助你在每次测试运行之前保持数据库没有记录的 gem。&lt;/p&gt;

&lt;p&gt;你需要做的就是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/rails_helper.rb&lt;/code&gt; RSpec 配置块中添加以下行：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:suite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;DatabaseCleaner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deletion&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;DatabaseCleaner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clean&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;在我们的 context里，它将在每次测试之前从测试数据库中删除记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个 gem 有更多的用法，有不同的策略，以便整个测试套件更快。有关详细信息，请访问 &lt;a href=&quot;https://github.com/DatabaseCleaner/database_cleaner&quot;&gt;DatabaseCleaner&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;faker&quot;&gt;Faker&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/stympy/faker&quot;&gt;faker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有时你希望在测试中使用随机数据（例如随机电子邮件地址），因为这可以帮助你在测试环境中暴露那些通常只会在生产中有真实数据流入系统时才暴露的问题。&lt;/p&gt;

&lt;p&gt;你可以使用 &lt;a href=&quot;https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md#sequences&quot;&gt;FactoryBot sequence syntax&lt;/a&gt; 序列语法生成随机数据：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;FactoryBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:worker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Ezo&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这会产生：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ezo1
Ezo2
Ezo3
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是这些数据看上去太简单了，有一种更好的方法使用 Faker gem 获得真正的随机数据：&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;Jonathan&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;Luigi&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;Crissy&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;75&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;48&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Faker 提供了许多不同的 “fake data” 类型， 你可以&lt;a href=&quot;https://github.com/stympy/faker#contents&quot;&gt;在这里&lt;/a&gt;探索它们，尝试使用变体来看看哪些更适合。&lt;/p&gt;

&lt;p&gt;在 Rails 世界中常见的是将 Faker 与 Factory bot 结合起来生成随机数据：&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/factories/workers.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;FactoryBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:worker&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以我们的测试看起来像 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/models/worker_spec.rb&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;rails_helper&apos;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ....&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;default worker details&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:worker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;should initialize worker with name and age&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_kind_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后再一次强调这是无用的测试，并没有给开发人员提供多大帮助，我只是想告诉你，当你处理随机数据时，你不能只比较结果是否等于一个字符串。你需要检查结果是否等于对象的状态和类型。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;你不想一直有随机数据，我甚至认为大多数时候使用 dereministic 数据更健康，想知道为什么请阅读 &lt;a href=&quot;https://blog.eq8.eu/article/back-to-the-primitive-testing-with-simplicity.html&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;讨论&quot;&gt;讨论&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.eq8.eu/article/junior-developer-set-up-rails-with-rspec-factorybot-database-cleaner.html&quot;&gt;https://blog.eq8.eu/article/junior-developer-set-up-rails-with-rspec-factorybot-database-cleaner.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文出自&lt;a href=&quot;https://blog.eq8.eu/article/junior-developer-set-up-rails-with-rspec-factorybot-database-cleaner.html&quot;&gt;EquiValent
&lt;/a&gt;。&lt;/p&gt;</content><author><name>Jim Huang</name><email>hjijin.gz@gmail.com</email></author><category term="development" /><category term="server" /><category term="rails" /><summary type="html">初级开发人员如何在项目中设置 RSpec： Rails 5.2, RSpec 3.7, Factory Bot, Database Cleaner 文章写于 2018-08-09， 适用于当前版本 gem。</summary></entry><entry><title type="html">git删除master分支</title><link href="https://hjijin.gz.com/blog/development/git-delete-master-branch.html" rel="alternate" type="text/html" title="git删除master分支" /><published>2016-05-06T00:00:00+08:00</published><updated>2016-05-06T00:00:00+08:00</updated><id>https://hjijin.gz.com/blog/development/git-delete-master-branch</id><content type="html" xml:base="https://hjijin.gz.com/blog/development/git-delete-master-branch.html">&lt;p&gt;最近把 blog 换了个 theme，并且将 blog 项目移到了一个新的分支：gh-pages，在删除 master 分支时出现了状况。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;首先想到的是直接在终端使用命令删除：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch -D master;//删除本地master分支
$ git push origin :master;//删除远程master分支
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发现删除不了，查了一下原因是本地处在 master 分支，在远程 master 为默认分支。&lt;/p&gt;

&lt;p&gt;后来是这样解决的：&lt;/p&gt;

&lt;p&gt;1.本地切换到 gh-pages 分支。
    $ git checkout gh-pages&lt;/p&gt;

&lt;p&gt;2.在github上将 项目的 default 分支切换到 gh-pages 分支。具体操作是 进到项目，点击 settings，选择 Branches 后选择不是 master 的分支。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/development/server/2016-05-06/branch_default.jpg&quot; alt=&quot;github设置默认分支&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.这个时候就可以使用以下命令删除了:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git branch -D master;//删除本地master分支
git push origin :master;//删除远程master分支
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就完成删除了。&lt;/p&gt;</content><author><name>Jim Huang</name><email>hjijin.gz@gmail.com</email></author><category term="development" /><category term="server" /><category term="git" /><summary type="html">最近把 blog 换了个 theme，并且将 blog 项目移到了一个新的分支：gh-pages，在删除 master 分支时出现了状况。</summary></entry><entry><title type="html">angular 实现轮播图</title><link href="https://hjijin.gz.com/blog/development/angular-picture-carousel.html" rel="alternate" type="text/html" title="angular 实现轮播图" /><published>2015-08-02T00:00:00+08:00</published><updated>2015-08-02T00:00:00+08:00</updated><id>https://hjijin.gz.com/blog/development/angular-picture-carousel</id><content type="html" xml:base="https://hjijin.gz.com/blog/development/angular-picture-carousel.html">&lt;p&gt;最近的项目首页用到图片轮播效果，于是用了 angular 写了两个 demo，主要用到angular 和 AngularUI 中的 &lt;a href=&quot;http://angular-ui.github.io/bootstrap/&quot;&gt;UI Bootstrap&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;主要实现如下：&lt;/p&gt;

&lt;h4 id=&quot;用-boostrap-中的控件&quot;&gt;用 boostrap 中的控件&lt;/h4&gt;
&lt;p&gt;在 html 中引入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ui-bootstrap.js&lt;/code&gt; 这个文件等：&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./bower_components/angular/angular.min.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./bower_components/angular-bootstrap/ui-bootstrap-tpls.min.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./assets/js/app.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./bower_components/bootstrap/dist/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;轮播图代码&quot;&gt;轮播图代码：&lt;/h4&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CarouselCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height: 305px&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;carousel&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;interval=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myInterval&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;no-wrap=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;noWrapSlides&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;slide&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slide in slides&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;active=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slide.active&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin:auto;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;carousel-caption&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Slide $index&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/slide&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/carousel&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;在-angular-中的操作有&quot;&gt;在 angular 中的操作有：&lt;/h4&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pictureCarousel&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ui.bootstrap&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;CarouselCtrl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myInterval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;noWrapSlides&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;slides&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slides&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addSlide&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;slides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;slides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://placekitten.com/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/300&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;More&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Extra&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Lots of&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Surplus&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Cats&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Kittys&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Felines&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Cutes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addSlide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就能实现如下效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/development/client/2015-08-02/1.jpg&quot; alt=&quot;轮换效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分别写了两个 DEMO，代码托管在 &lt;a href=&quot;https://github.com/tclz/angular-picture-carousel&quot;&gt;github&lt;/a&gt;。&lt;/p&gt;</content><author><name>Jim Huang</name><email>hjijin.gz@gmail.com</email></author><category term="development" /><category term="client" /><category term="angular" /><summary type="html">最近的项目首页用到图片轮播效果，于是用了 angular 写了两个 demo，主要用到angular 和 AngularUI 中的 UI Bootstrap。 主要实现如下： 用 boostrap 中的控件 在 html 中引入 ui-bootstrap.js 这个文件等： &amp;lt;script src=&quot;./bower_components/angular/angular.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&quot;./bower_components/angular-bootstrap/ui-bootstrap-tpls.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&quot;./assets/js/app.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;./bower_components/bootstrap/dist/css/bootstrap.min.css&quot;&amp;gt; 轮播图代码： &amp;lt;div ng-controller=&quot;CarouselCtrl&quot;&amp;gt; &amp;lt;div style=&quot;height: 305px&quot;&amp;gt; &amp;lt;carousel interval=&quot;myInterval&quot; no-wrap=&quot;noWrapSlides&quot;&amp;gt; &amp;lt;slide ng-repeat=&quot;slide in slides&quot; active=&quot;slide.active&quot;&amp;gt; &amp;lt;img ng-src=&quot;&quot; style=&quot;margin:auto;&quot;&amp;gt; &amp;lt;div class=&quot;carousel-caption&quot;&amp;gt; &amp;lt;h4&amp;gt;Slide $index&amp;lt;/h4&amp;gt; &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/slide&amp;gt; &amp;lt;/carousel&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 在 angular 中的操作有： angular.module(&apos;pictureCarousel&apos;, [&apos;ui.bootstrap&apos;]).controller(&apos;CarouselCtrl&apos;, function ($scope) { $scope.myInterval = 5000; $scope.noWrapSlides = false; var slides = $scope.slides = []; $scope.addSlide = function() { var newWidth = 600 + slides.length + 1; slides.push({ image: &apos;http://placekitten.com/&apos; + newWidth + &apos;/300&apos;, text: [&apos;More&apos;,&apos;Extra&apos;,&apos;Lots of&apos;,&apos;Surplus&apos;][slides.length % 4] + &apos; &apos; + [&apos;Cats&apos;, &apos;Kittys&apos;, &apos;Felines&apos;, &apos;Cutes&apos;][slides.length % 4] }); }; for (var i=0; i&amp;lt;4; i++) { $scope.addSlide(); } }); 这样就能实现如下效果： 分别写了两个 DEMO，代码托管在 github。</summary></entry><entry><title type="html">Ruby on Rails 简易重构例子</title><link href="https://hjijin.gz.com/blog/development/ruby-on-rails-refactoring-techniques.html" rel="alternate" type="text/html" title="Ruby on Rails 简易重构例子" /><published>2014-04-30T00:00:00+08:00</published><updated>2014-04-30T00:00:00+08:00</updated><id>https://hjijin.gz.com/blog/development/ruby-on-rails-refactoring-techniques</id><content type="html" xml:base="https://hjijin.gz.com/blog/development/ruby-on-rails-refactoring-techniques.html">&lt;p&gt;重构的目的是提高代码的质量，清晰度和可维护性。 从别人的项目中接手过来的陌生的代码库，看里面的代码，总有种眼花缭乱的感觉，或许是因为他不符合自己的风格，又或许它真的很烂，不管怎么样，看过后，自己的想法是，能不能用更好的方法将他实现？苦于无重构的经验，于是乎开始了重构的学习。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;开始重构&quot;&gt;开始重构&lt;/h2&gt;

&lt;h3 id=&quot;1方法重命名&quot;&gt;1.方法重命名&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;一个最简单最有效的重构是：重命名一个属性/属性，方法或对象。
一个有意义的命名，可以避免很多代码注释，使代码更清晰更易理解。重命名是重构里面最基本的重构技术
，命名依赖于项目描述，以确保开发人员知道一看它究竟是什么。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2解释变量&quot;&gt;2.解释变量&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;如果有一个复杂的表达式（比如，if语句通常有一个罗里吧嗦的条件组），应该将条件赋值到一个临时变量，并给它一个描述性的标识符。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is a String with some CAPS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/([A-Z])/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;capitalised text was found&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;重构后：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;caps_not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is a String with some CAPS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/([A-Z])/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caps_not_found&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;capitalised text was found&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;3一个方法在另一个方法中调用&quot;&gt;3.一个方法在另一个方法中调用&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;很多时候，一个公用的方法，往往很多其他的方法需要调用，然后每个方法都将这个公共方法赋值，更多的时候，赋值的变量名像那王大娘的裹脚布。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_stuff&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;temp_variable_with_descriptive_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_stuff&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Number is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp_variable_with_descriptive_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;重构后：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_stuff&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Number is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_stuff&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;4变量分开赋值&quot;&gt;4.变量分开赋值&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;项目中经常出现一个变量赋值不止一次，并且每次赋值后，变量的意义都不一，这有悖SRP（单一职责原则）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;重构后：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;perimeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;5链接方法代替调用&quot;&gt;5.链接方法代替调用&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果你有一个临时变量保存调用对象的方法的结果，并临时进行多次的方法调用，那么你应该考虑链接的方法调用来代替。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;College&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_course&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create course&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_student&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add student&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;College&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_course&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_student&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_student&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_student&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;重构后：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;College&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# static method so can be accessed without creating an instance&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_course&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;college&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;College&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create course&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;college&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# return new object instance&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_student&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add student&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# refers to the new object instance&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;college&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;College&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_course&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_student&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_student&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_student&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;6提取方法&quot;&gt;6.提取方法&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;实现是非常简单的。就是将过长的方法它，过于复杂的模块提取到具有描述性标识的新方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my baz&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# notice this is duplication&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something_else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my baz&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# notice this is duplication&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Something else&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;重构后：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_something_else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Something else&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;baz&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my baz&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;7方法对象替代方法&quot;&gt;7.方法对象替代方法&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;您可能会遇到，你必须要使用提取方法，但临时局部变量的数目实在是太大了。要解决此问题，要做的第一件事是创建一个长的方法来命名新类并添加临时本地变量作为类/对象的属性/属性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;We&apos;re doing some bar stuff&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;something&apos;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# do something&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;else&apos;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# do else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;none&apos;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# do none &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;重构后：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;We&apos;re doing some bar stuff&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Baz&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;something&apos;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# do something&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;else&apos;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# do else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;none&apos;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# do none&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;8collection-closure-方法替换-loop&quot;&gt;8.Collection Closure 方法替换 Loop&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个是我以前经常用的方式，要从一堆数据中提取出需要的内容放到一个新数组，我的惯用法是先声明一个空数组，然后对数据迭代。总感觉这样非常丑陋。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;managers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;managers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;manager?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;重构后：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;managers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;manager?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###9.提取公共方法&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;当在两个单独的类中有重复的代码，那么最好提取重复的代码到一个超类，rails不是有个思想叫DRY（不要重复自己），并将它用于在多个地方。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MalePerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This is duplicated in the `FemalePerson` class&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gender&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;M&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FemalePerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This is duplicated in the `MalePerson` class&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gender&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;F&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;重构后：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MalePerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gender&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;M&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FemalePerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gender&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;F&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;原文：&lt;a href=&quot;http://www.integralist.co.uk/posts/refactoring-techniques/#inline-temp&quot;&gt;Refactoring Techniques&lt;/a&gt;&lt;/p&gt;</content><author><name>Jim Huang</name><email>hjijin.gz@gmail.com</email></author><category term="development" /><category term="server" /><category term="rails" /><summary type="html">重构的目的是提高代码的质量，清晰度和可维护性。 从别人的项目中接手过来的陌生的代码库，看里面的代码，总有种眼花缭乱的感觉，或许是因为他不符合自己的风格，又或许它真的很烂，不管怎么样，看过后，自己的想法是，能不能用更好的方法将他实现？苦于无重构的经验，于是乎开始了重构的学习。</summary></entry><entry><title type="html">Bower–用于web前端开发的包管理器</title><link href="https://hjijin.gz.com/blog/development/bower-the-manager-for-web-development-package.html" rel="alternate" type="text/html" title="Bower–用于web前端开发的包管理器" /><published>2013-12-02T00:00:00+08:00</published><updated>2013-12-02T00:00:00+08:00</updated><id>https://hjijin.gz.com/blog/development/bower-the-manager-for-web-development-package</id><content type="html" xml:base="https://hjijin.gz.com/blog/development/bower-the-manager-for-web-development-package.html">&lt;p&gt;Bower是用于web前端开发的包管理器。对于前端包管理方面的问题，它提供了一套通用、客观的解决方案。它通过一个API暴露包之间的依赖模型，这样更利于使用更合适的构建工具。Bower没有系统级的依赖，在不同app之间也不互相依赖，依赖树是扁平的。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Bower运行在Git之上，它将所有包都视作一个黑盒子。任何类型的资源文件都可以打包为一个模块，并且可以使用任何规范（例如：AMD、CommonJS等）。&lt;/p&gt;

&lt;h3 id=&quot;安装bower&quot;&gt;安装Bower&lt;/h3&gt;
&lt;p&gt;Bower依赖&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node&lt;/a&gt; 和 &lt;a href=&quot;http://npmjs.org/&quot;&gt;npm&lt;/a&gt;。通过npm 安装到全局环境中：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;npm install -g bower&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;p&gt;安装之后，可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower help&lt;/code&gt; 命令可以获取更多帮助信息。了解了这些 信息就可以开始了。&lt;/p&gt;

&lt;h4 id=&quot;安装包及其依赖的包&quot;&gt;安装包及其依赖的包&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Using the dependencies listed in the current directory&apos;s bower.json
  bower install
# Using a local or remote package
  bower install &amp;lt;package&amp;gt;
# Using a specific Git-tagged version from a remote package
  bower install &amp;lt;package&amp;gt;#&amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;例子&quot;&gt;例子&lt;/h5&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~  bower install jquery
    bower jquery#*  cached git://github.com/components/    jquery.git#2.0.3
    bower jquery#*  validate 2.0.3 against git://github.com/components/jquery.git#*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;jQuery 会被下载到 ./bower_components 目录下，在页面上直接调用就可以了, 不建议直接修改此目录中的内容。
查看目录结构
    $ tree bower_components/
Bower 在下载的时候会去 server 上找名字对应的 git 库，下载后切换到对应的版本，如果未指定则是最新的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除了按名字下载，还有其他方式&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 直接下载 git 库
bower install git://github.com/components/jquery.git
github 的别名，自动解析成 git 库
bower install components/jquery (same as above)
# 下载线上的任意文件
bower install http://foo.com/jquery.awesome-plugin.js
# 下载本地库
bower install ./repos/jquery 如果只是下载的话是不需要配置文件的。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;查找包&quot;&gt;查找包&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bower search [\&amp;lt;name\&amp;gt;]
只需执行bower search命令即可列出所有已经注册的包。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用包&quot;&gt;使用包&lt;/h4&gt;

&lt;p&gt;做简单的使用方式就是通过script 标签直接引入已经安装的包：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/bower_components/jquery/index.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对于更复杂的项目，你可能更希望合并所有脚本或者使用模块加载器（module loader）。 
Bower只是一个包管理器，不过你可以使用很多其他工具 – 例如: 
&lt;a href=&quot;https://github.com/sstephenson/sprockets&quot;&gt;Sprockets&lt;/a&gt; 和 &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; – 这些都能帮你完成你所希望的工作。&lt;/p&gt;

&lt;h4 id=&quot;注册包&quot;&gt;注册包&lt;/h4&gt;
&lt;p&gt;可以注册自己的包，这样其他人也可以使用了&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bower register project git://github.com/yourname/project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个操作只是在服务器上保存了一个隐射，服务器本身不托管代码。现在还有没有直接移除已注册包的途径。如果需要，可以&lt;a href=&quot;https://github.com/bower/bower/issues/120&quot;&gt;request a package be unregistered&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;卸载包&quot;&gt;卸载包&lt;/h4&gt;

&lt;p&gt;卸载已经安装到本地的包：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bower uninstall &amp;lt;package-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;配置文件&quot;&gt;配置文件&lt;/h4&gt;
&lt;p&gt;每个包应该有一个配置文件，描述包的信息，bower 的配置文件为 component.json。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  {
    &quot;name&quot;: &quot;myProject&quot;,
    &quot;version&quot;: &quot;1.0.0&quot;,
    &quot;main&quot;: &quot;./path/to/main.css&quot;,
    &quot;dependencies&quot;: {
      &quot;jquery&quot;: &quot;~1.7.2&quot;
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;name 和 version 描述包的名称和版本，dependencies 描述这个包依赖的其他包。main 指定包中的静态文件，可以为一个数组。
除了包的配置文件，bower 还有一个全局的配置文件(~/.bowerrc)。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;directory&quot; : &quot;components&quot;,
  &quot;json&quot;      : &quot;component.json&quot;,
  &quot;endpoint&quot;  : &quot;https://bower.herokuapp.com&quot;,
  &quot;searchpath&quot; : [&quot;https://bower.herokuapp.com&quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;directory 为 install 时生成的目录，json 指定配置文件的名称。
endpoint 指定 bower server，用于储存包的信息，默认是 bower 官方的，也可以自己搭建 bower server。可以通过 register 命令将包信息注册到 endpoint 上。
searchpath 可以指定一系列的 bower server，但是只是用于查询。首先查询 endpoint，如果没有再按顺序查询 searchpath。&lt;/p&gt;

&lt;h3 id=&quot;项目中使用&quot;&gt;项目中使用&lt;/h3&gt;

&lt;p&gt;在项目中使用 bower 也比较简单。
给自己的项目也添加一个 component.json 配置文件，执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower install&lt;/code&gt;，bower 会将依赖的包下载到 bower_components 的目录下。
如果依赖的包还依赖其他包，bower 也会下载到本地，直到把所有依赖的包都下载完成。bower 的目录结构是扁平化的，所有的包都在同级目录下。
如果想查看有哪些包和文件，可执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bower list --path&lt;/code&gt;。比如 install 了 jquery，可以看到以下信息&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  {
    &quot;jquery&quot;: &quot;components/jquery/jquery.js&quot;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在就可以使用了，在当前目录建一个页面，script 嵌入需要的 js，如果想对 js 做模块化管理可使用 &lt;a href=&quot;http://seajs.org/docs/&quot;&gt;seajs&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;Bower 非常简单易用，只要创建一个 component.json 添加依赖包的配置就可以使用了，再不需要到处去找了。
现在就开始使用吧，&lt;a href=&quot;http://sindresorhus.com/bower-components/&quot;&gt;找找有没有你想用的组件&lt;/a&gt;。&lt;/p&gt;</content><author><name>Jim Huang</name><email>hjijin.gz@gmail.com</email></author><category term="development" /><category term="client" /><category term="Web" /><summary type="html">Bower是用于web前端开发的包管理器。对于前端包管理方面的问题，它提供了一套通用、客观的解决方案。它通过一个API暴露包之间的依赖模型，这样更利于使用更合适的构建工具。Bower没有系统级的依赖，在不同app之间也不互相依赖，依赖树是扁平的。</summary></entry></feed>